{"remainingRequest":"D:\\ng-shopping\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\ng-shopping\\node_modules\\angularfire2\\database\\observable\\fromRef.js","dependencies":[{"path":"D:\\ng-shopping\\node_modules\\angularfire2\\database\\observable\\fromRef.js","mtime":1507940398000},{"path":"D:\\ng-shopping\\node_modules\\@angular\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\ng-shopping\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Observable } from 'rxjs/Observable';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { ZoneScheduler } from 'angularfire2';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/share';\nexport function fromRef(ref, event, listenType) {\n    if (listenType === void 0) { listenType = 'on'; }\n    var ref$ = new Observable(function (subscriber) {\n        var fn = ref[listenType](event, function (snapshot, prevKey) {\n            subscriber.next({ snapshot: snapshot, prevKey: prevKey });\n            if (listenType == 'once') {\n                subscriber.complete();\n            }\n        }, subscriber.error.bind(subscriber));\n        if (listenType == 'on') {\n            return { unsubscribe: function () { ref.off(event, fn); } };\n        }\n        else {\n            return { unsubscribe: function () { } };\n        }\n    })\n        .map(function (payload) {\n        var snapshot = payload.snapshot, prevKey = payload.prevKey;\n        var key = null;\n        if (snapshot.exists()) {\n            key = snapshot.key;\n        }\n        return { type: event, payload: snapshot, prevKey: prevKey, key: key };\n    })\n        .delay(0);\n    return observeOn.call(ref$, new ZoneScheduler(Zone.current)).share();\n}\n//# sourceMappingURL=fromRef.js.map",null]}